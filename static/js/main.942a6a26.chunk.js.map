{"version":3,"sources":["components/JobSection.js","components/JobsList.js","components/FilterPanel.js","components/Header.js","components/Attribution.js","components/App.js","index.js"],"names":["JobSection","job","setSelected","selected","company","logo","featured","position","role","level","postedAt","contract","location","languages","tools","isItNew","new","className","src","process","alt","href","onClick","roles","levels","map","language","includes","tool","JobsList","data","renderJobsList","filter","item","rolesNotEmpty","length","itemRolesIsInSelected","levelsNotEmpty","offerLevelsIsInSelected","languagesNotEmpty","offerLanguagesIsInSelected","every","currentValue","toolsNotEmpty","offerToolsIsInSelected","id","FilterPanel","selectedFilters","items","key","el","push","aria-label","xmlns","width","height","fill","fillRule","d","Object","entries","renderSelected","Header","isSelectedEmpty","values","style","backgroundImage","Attribution","target","rel","App","useState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.942a6a26.chunk.js","sourcesContent":["import React from \"react\";\n\nconst JobSection = ({ job, setSelected, selected }) => {\n  const {\n    company,\n    logo,\n    featured,\n    position,\n    role,\n    level,\n    postedAt,\n    contract,\n    location,\n    languages,\n    tools,\n  } = job;\n  const isItNew = job.new;\n  return (\n    // https://www.pluralsight.com/guides/applying-classes-conditionally-react\n    <section\n      className={`bg-white max-w-8xl w-11/12 shadow-block mb-14 sm:mb-10 mx-auto rounded-md flex flex-wrap md:flex-nowrap justify-between items-center border-l-8 ${\n        featured ? \"border-primary\" : \"border-white\"\n      }`}\n    >\n      <div className=\"flex flex-col sm:flex-row my-6\">\n        <div className=\"ml-6 flex-shrink-0 w-16 sm:w-auto -mt-14 mb-4 sm:mb-0 sm:mt-0\">\n          {/* https://create-react-app.dev/docs/using-the-public-folder/ */}\n          <img\n            src={process.env.PUBLIC_URL + logo}\n            alt={`${company} company logo`}\n          />\n        </div>\n\n        <div className=\"ml-6\">\n          <div className=\"flex flex-wrap items-center\">\n            <p className=\"text-primary\">{company}</p>\n            <ul className=\"flex text-white text-xs\">\n              <li\n                className={`bg-primary rounded-2xl ml-3 ${\n                  isItNew ? \"px-2\" : \"px-0\"\n                } ${isItNew ? \"py-1\" : \"py-0\"}`}\n              >\n                {isItNew ? \"NEW!\" : \"\"}\n              </li>\n              <li\n                className={`bg-neutral-400 rounded-2xl ml-3 ${\n                  featured ? \"py-1\" : \"py-0\"\n                } ${featured ? \"px-2\" : \"px-0\"}`}\n              >\n                {featured ? \"FEATURED\" : \"\"}\n              </li>\n            </ul>\n          </div>\n          <h2 className=\"text-lg my-2\">\n            <a className=\"hover:text-primary\" href=\"#top\">\n              {position}\n            </a>\n          </h2>\n          <div>\n            <ul className=\"flex flex-wrap items-center text-neutral-300 font-medium\">\n              <li>{postedAt}</li>\n              <span className=\"h-1 w-1 rounded-full bg-neutral-300 mx-2\"></span>\n              <li>{contract}</li>\n              <span className=\"h-1 w-1 rounded-full bg-neutral-300 mx-2\"></span>\n              <li>{location}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-6 md:mx-0md:mb-0 h-0.5 md:h-0 w-full md:w-0 bg-neutral-300 rounded-full\"></div>\n\n      <div className=\"mt-6 ml-6\">\n        <ul className=\"flex flex-wrap\">\n          <li>\n            <button\n              onClick={() => {\n                setSelected({ ...selected, roles: [role] });\n              }}\n              className=\"font-bold bg-neutral-200 rounded-md hover:bg-primary hover:text-white mr-4 mb-4 p-2 text-primary\"\n            >\n              {role}\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={() => {\n                setSelected({ ...selected, levels: [level] });\n              }}\n              className=\"font-bold bg-neutral-200 rounded-md hover:bg-primary hover:text-white mr-4 mb-4 p-2 text-primary\"\n            >\n              {level}\n            </button>\n          </li>\n          {languages.map((language) => {\n            return (\n              <li key={language}>\n                <button\n                  onClick={() => {\n                    if (!selected.languages.includes(language)) {\n                      setSelected({\n                        ...selected,\n                        languages: [...selected.languages, language],\n                      });\n                    }\n                  }}\n                  className=\"font-bold bg-neutral-200 rounded-md hover:bg-primary hover:text-white mr-4 mb-4 p-2 text-primary\"\n                >\n                  {language}\n                </button>\n              </li>\n            );\n          })}\n          {tools.map((tool) => {\n            return (\n              <li key={tool}>\n                <button\n                  onClick={() => {\n                    if (!selected.tools.includes(tool)) {\n                      setSelected({\n                        ...selected,\n                        tools: [...selected.tools, tool],\n                      });\n                    }\n                  }}\n                  className=\"font-bold bg-neutral-200 rounded-md hover:bg-primary hover:text-white mr-4 mb-4 p-2 text-primary\"\n                >\n                  {tool}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nexport default JobSection;\n","import React from \"react\";\nimport JobSection from \"./JobSection\";\n\nconst JobsList = ({ data, setSelected, selected }) => {\n  const renderJobsList = data\n    .filter((item) => {\n      // Filter jobs that mustn't be rendered\n      const rolesNotEmpty = selected.roles.length !== 0;\n      const itemRolesIsInSelected = selected.roles.includes(item.role);\n\n      const levelsNotEmpty = selected.levels.length !== 0;\n      const offerLevelsIsInSelected = selected.levels.includes(item.level);\n\n      const languagesNotEmpty = selected.languages.length !== 0;\n      const offerLanguagesIsInSelected = selected.languages.every(\n        (currentValue) => item.languages.includes(currentValue)\n      );\n\n      const toolsNotEmpty = selected.tools.length !== 0;\n      const offerToolsIsInSelected = selected.tools.every((currentValue) =>\n        item.tools.includes(currentValue)\n      );\n\n      //return false if job mustn't be rendered\n      if (rolesNotEmpty === true && itemRolesIsInSelected === false) {\n        return false;\n      }\n      if (levelsNotEmpty === true && offerLevelsIsInSelected === false) {\n        return false;\n      }\n      if (languagesNotEmpty === true && offerLanguagesIsInSelected === false) {\n        return false;\n      }\n      if (toolsNotEmpty === true && offerToolsIsInSelected === false) {\n        return false;\n      }\n      //else - return true and render this job item\n      return true;\n    })\n    .map((job) => {\n      const id = job.id;\n      return (\n        <JobSection\n          job={job}\n          setSelected={setSelected}\n          selected={selected}\n          key={id}\n        />\n      );\n    });\n  return <main>{renderJobsList}</main>;\n};\n\nexport default JobsList;\n","import React from \"react\";\n\nconst FilterPanel = ({ selected, setSelected, selectedFilters }) => {\n  const renderSelected = () => {\n    const items = [];\n    for (const [key, value] of Object.entries(selected)) {\n      value.map((el) => {\n        return items.push(\n          <li className=\"bg-neutral-200 rounded-md mr-4 mb-4\" key={el}>\n            <span className=\"p-2 text-primary sm:p-3\">{el}</span>\n            <button\n              // remove filter element from selected\n              onClick={() => {\n                setSelected({\n                  ...selected,\n                  [key]: selected[key].filter((item) => item !== el),\n                });\n              }}\n              aria-label={`delete ${el} filter`}\n              className=\"p-3 bg-primary text-white rounded-r-md hover:bg-neutral-400\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n                <path\n                  fill=\"#FFF\"\n                  fillRule=\"evenodd\"\n                  d=\"M11.314 0l2.121 2.121-4.596 4.596 4.596 4.597-2.121 2.121-4.597-4.596-4.596 4.596L0 11.314l4.596-4.597L0 2.121 2.121 0l4.596 4.596L11.314 0z\"\n                />\n              </svg>\n            </button>\n          </li>\n        );\n      });\n    }\n    return items;\n  };\n\n  return (\n    <div className=\"flex justify-between bg-white rounded-md m-auto -mt-10 max-w-8xl w-11/12 shadow-block\">\n      <ul className=\"flex flex-wrap pt-6 pr-6 pl-6\">{renderSelected()}</ul>\n      {/* Is there a better way how to clean selected? */}\n      <button\n        onClick={() => {\n          setSelected(selectedFilters);\n        }}\n        className=\"self-center font-bold text-neutral-300 mr-5 hover:text-primary hover:underline\"\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nexport default FilterPanel;\n","import React from \"react\";\nimport FilterPanel from \"./FilterPanel\";\n\nconst Header = ({ selected, setSelected, selectedFilters }) => {\n  const allValues = Object.values(selected);\n  const isSelectedEmpty = allValues.every(\n    (currentValue) => currentValue.length === 0\n  );\n\n  return (\n    <header className=\"mb-14 sm:mb-10\">\n      <div\n        className=\"bg-primary h-36\"\n        // https://create-react-app.dev/docs/using-the-public-folder/\n        style={{\n          backgroundImage: `url(${\n            process.env.PUBLIC_URL + \"/images/bg-header-desktop.svg\"\n          })`,\n        }}\n      ></div>\n      {!isSelectedEmpty ? (\n        <FilterPanel\n          selected={selected}\n          setSelected={setSelected}\n          selectedFilters={selectedFilters}\n        />\n      ) : (\n        \"\"\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\n// TODO: Мое имя и ссылку на гит можно вынести как пропс\n\nconst Attribution = () => {\n  return (\n    <div className=\"attribution text-xs text-center\">\n      Challenge by\n      <a\n        className=\"text-attribution\"\n        href=\"https://www.frontendmentor.io?ref=challenge\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Frontend Mentor\n      </a>\n      . Coded by\n      <a className=\"text-attribution\" href=\"https://github.com/ALapina\">\n        Anna Lapina\n      </a>\n      .\n    </div>\n  );\n};\n\nexport default Attribution;\n","import React, { useState } from \"react\";\nimport JobsList from \"./JobsList\";\nimport Header from \"./Header\";\nimport Attribution from \"./Attribution\";\nimport data from \"../data.json\";\n\nconst App = () => {\n  const selectedFilters = {\n    roles: [],\n    levels: [],\n    languages: [],\n    tools: [],\n  };\n\n  const [selected, setSelected] = useState(selectedFilters);\n  return (\n    <div>\n      <Header\n        selected={selected}\n        setSelected={setSelected}\n        selectedFilters={selectedFilters}\n      />\n      <JobsList data={data} selected={selected} setSelected={setSelected} />\n      <Attribution />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}