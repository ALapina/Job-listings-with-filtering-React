{"version":3,"sources":["components/VacancyList3.js","components/App.js","index.js"],"names":["VacancyList","data","useState","roles","levels","languages","tools","selected","setSelected","renderVacancyList","filter","item","rolesNotEmpty","length","itemRolesIsInSelected","includes","role","levelsNotEmpty","itemLevelsIsInSelected","level","languagesNotEmpty","itemLanguageIsInSelected","every","currentValue","toolsNotEmpty","itemToolsIsInSelected","map","vacancy","className","onClick","language","tool","company","renderElement","element","renderTools","id","toString","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d647a6a7.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\n\nconst VacancyList = ({ data }) => {\n  const [selected, setSelected] = useState({\n    roles: [],\n    levels: [],\n    languages: [],\n    tools: [],\n  });\n  // console.log(selected);\n\n  const renderVacancyList = data\n    .filter((item) => {\n      // Если в в selected.roles что то есть то возвращаем true, если selected.roles пустой то возвращаем false\n      const rolesNotEmpty = selected.roles.length !== 0;\n      // Берем айтем - это объект с одной вакансией и проверяем, что роль в этой вакансии например Frontent соответсвует той роли что находится в selected.roles\n      // Если роль в вакансии соответствует роли в selected.roles то возвращаем true\n      const itemRolesIsInSelected = selected.roles.includes(item.role);\n\n      const levelsNotEmpty = selected.levels.length !== 0;\n      //все что в селектед вернут тру, все что не в селектед вернут фалсе\n      const itemLevelsIsInSelected = selected.levels.includes(item.level);\n\n      const languagesNotEmpty = selected.languages.length !== 0;\n\n      //every проходит по каждому элементу в массиве и проверяем что item.languages содержит этот жлемент\n      //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n      //https://stackoverflow.com/questions/16312528/check-if-an-array-contains-any-element-of-another-array-in-javascript\n\n      const itemLanguageIsInSelected = selected.languages.every(\n        (currentValue) => item.languages.includes(currentValue)\n      );\n\n      const toolsNotEmpty = selected.tools.length !== 0;\n      const itemToolsIsInSelected = selected.tools.every((currentValue) =>\n        item.tools.includes(currentValue)\n      );\n\n      // Берем все элементы что не соответствуют тому что в selected.roles, например если в selected.roles у нас Frontend, то фулстак будет возвращать false\n      // И если в selected.roles вообще что то есть, тк если в selected.roles ничего нет, то он по умолчанию возвращает false\n      // И если эти два условия работают то возвращаем false, то есть никакого фильтра не будет и мы дальше мапаем и рендерим всю дату\n      // То есть если selected.roles пустой то рендерим весь объект\n      // А если что то есть, то не отображаем все кроме того что в selected.roles\n      if (itemRolesIsInSelected === false && rolesNotEmpty === true) {\n        return false;\n      }\n      if (itemLevelsIsInSelected === false && levelsNotEmpty === true) {\n        return false;\n      }\n\n      if (itemLanguageIsInSelected === false && languagesNotEmpty === true) {\n        return false;\n      }\n      if (itemToolsIsInSelected === false && toolsNotEmpty === true) {\n        return false;\n      }\n\n      return true;\n    })\n    .map((vacancy) => {\n      // TODO: Create Component VacancyItem\n\n      return (\n        <div className=\"company-wrapper\" key={vacancy.company}>\n          <div className=\"filter\">\n            <div\n              className=\"role filter-element\"\n              //как сделать setSelected на объект нашла на https://stackoverflow.com/questions/54150783/react-hooks-usestate-with-object\n              onClick={() => {\n                setSelected({\n                  ...selected,\n                  roles: [vacancy.role],\n                });\n              }}\n            >\n              {vacancy.role}\n            </div>\n            <div\n              className=\"level filter-element\"\n              onClick={() => {\n                setSelected({\n                  ...selected,\n                  levels: [vacancy.level],\n                });\n              }}\n            >\n              {vacancy.level}\n            </div>\n            {/* Опять мап с ретерном */}\n            <div className=\"languages filter-element\">\n              {vacancy.languages.map((language) => {\n                return (\n                  <div\n                    key={language}\n                    className={`filter-element ${language}`}\n                    //Если в selected.languages ещё нет данного языка (например html), то пушим этот язык в selected.languages\n                    onClick={() => {\n                      if (!selected.languages.includes(language)) {\n                        setSelected({\n                          ...selected,\n                          languages: [...selected.languages, language],\n                        });\n                      }\n                    }}\n                  >\n                    {language}\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"tools filter-element\">\n              {vacancy.tools.map((tool) => {\n                return (\n                  <div\n                    key={tool}\n                    className={`filter-element ${tool}`}\n                    onClick={() => {\n                      if (!selected.tools.includes(tool)) {\n                        setSelected({\n                          ...selected,\n                          tools: [...selected.tools, tool],\n                        });\n                      }\n                    }}\n                  >\n                    {tool}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n  const renderElement = selected.languages.map((element) => {\n    return (\n      <span\n        key={element}\n        className=\"language-element\"\n        onClick={() => {\n          setSelected({\n            ...selected,\n            languages: selected.languages.filter((item) => item !== element),\n          });\n        }}\n      >\n        {element}\n      </span>\n    );\n  });\n\n  const renderTools = selected.tools.map((element) => {\n    return (\n      <span\n        key={element}\n        className=\"tool-element\"\n        onClick={() => {\n          setSelected({\n            ...selected,\n            tools: selected.tools.filter((item) => item !== element),\n          });\n        }}\n      >\n        {element}\n      </span>\n    );\n  });\n\n  //Object entries???\n  //https://stackoverflow.com/questions/46187518/object-entries-map-to-render-react-components-array\n\n  return (\n    <Fragment>\n      {/* TODO: Create component FilterPanel */}\n\n      <div className=\"filter-panel\" id=\"filter-panel\">\n        <button\n          className=\"role-element\"\n          onClick={() => {\n            setSelected({\n              ...selected,\n              roles: selected.roles.filter(\n                (item) => item !== selected.roles.toString()\n              ),\n            });\n          }}\n        >\n          {selected.roles}\n        </button>\n        <div\n          className=\"level-element\"\n          onClick={() => {\n            setSelected({\n              ...selected,\n              levels: selected.levels.filter(\n                (item) => item !== selected.levels.toString()\n              ),\n            });\n          }}\n        >\n          {selected.levels}\n        </div>\n        <div>{renderElement}</div>\n        <div>{renderTools}</div>\n      </div>\n      <div className=\"main-block\">\n        <p>hui</p>\n        {renderVacancyList}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default VacancyList;\n","import React from \"react\";\nimport VacancyList from \"./VacancyList3\";\n\nimport data from \"../data.json\";\n\nconst App = () => {\n  // console.log(data);\n  return (\n    <div className=\"container\">\n      {/* Фильтр панель нужно будет вытащить из VacancyList как отдельный компонент */}\n      {/* <div className=\"filter-panel\" id=\"filter-panel\"></div> */}\n      <VacancyList data={data} />\n\n      <p>APP</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./style.css\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}